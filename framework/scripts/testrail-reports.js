#!/usr/bin/env node

const buildOptions = require('minimist-options');
const JSON5 = require('json5');
const minimist = require('minimist');
const Testrail = require('testrail-api');
const testrail_lib = require('../libs/testrail_libs');
const jsonfile = require('jsonfile');
const _ = require ('underscore');

const options = buildOptions({
    // Special Parameters
    apiUrl: {
		type: 'string',
		default: process.env.trApiUrl
    },
    apiUser: {
		type: 'string',
		default: process.env.trApiUser
    },
    apiPassword: {
		type: 'string',
		default: process.env.trApiKey
    },
    // Cucumber Parameters
    cbJsonPath: {
        type: 'string'
    },
    // API parameters
    trCaseId: {
		type: 'number'
    },
    trTestId: {
        type: 'number'
    },
	trCmd: {
		type: 'string',
		default: 'getProjects'
    },
    trFilter: {
        type: 'string',
        default: ''
    },
    trMilestoneId: {
		type: 'number'
    },
	trProjectId: {
		type: 'number',
		default: 63 // QA Playground
    },
    trRunId: {
		type: 'number'
    },
    trSectionId: {
		type: 'number'
    },
    trSuiteId: {
		type: 'number'
    },
    trSuiteName: {
		type: 'string'
    },
    trUserEmail: {
		type: 'string'
    },
    trUserId: {
		type: 'number'
    },
    trForceAdd: {
        type: 'boolean',
        default: false
    },
    trForceUpdate: {
        type: 'boolean',
        default: false
    },
    trSprintId: {
        type: 'number',
        default: 0 //0 - autogenerated
    },
    trTestTarget: {
        type: 'string',
        default: "QA"
    },
    trTestrunId: {
        type: 'number'        
    },
    trJenkinsPath : {
        type: 'string'
    },

	// Special option for positional arguments (`_` in minimist)
	arguments: 'string'
});

const args = minimist(process.argv.slice(2), options);
const trFilter = JSON5.parse('{' + args.trFilter + '}');

var testrail = new Testrail({
    host: args.apiUrl,
    user: args.apiUser,
    password: args.apiPassword,
});

switch (args.trCmd) {
    case 'getCase':
    case 'getCaseById':
    console.log ( "get case")
        testrail.getCase(/*CASE_ID=*/args.trCaseId, function (err, response, testcase) {
            console.log(testcase);
        });
        break;
    case 'getCases':
        testrail.getCases(/*PROJECT_ID=*/args.trProjectId, /*FILTERS=*/trFilter, function (err, response, cases) {
            console.log(cases);
        });
        break;
    case 'getProjects':
        testrail.getProjects(/*FILTERS=*/trFilter, function (err, response, projects) {
            console.log(projects);
        });
        break;
    case 'getProject':
        testrail.getProject(/*PROJECT_ID=*/args.trProjectId, function (err, response, project) {
            console.log(project);
        });
        break;
    case 'getMilestones':
        testrail.getMilestones(/*PROJECT_ID=*/args.trProjectId, /*FILTERS=*/trFilter, function (err, response, milestones) {
            console.log(milestones);
        });      
        break;
    case 'getMilestone':
        testrail.getMilestone(/*MILESTONE_ID=*/args.trMilestoneId, function (err, response, milestone) {
            console.log(milestone);
        });
        break;
    case 'deleteMilestone':
        testrail.deleteMilestone(/*MILESTONE_ID=*/args.trMilestoneId, function (err, response, body) {
            console.log(body);
        });
        break;    
    case 'getRuns':
        testrail.getRuns(/*PROJECT_ID=*/args.trProjectId, /*FILTERS=*/trFilter, function (err, response, runs) {
            console.log(runs)
        });
        break;
    case 'getRun':
        testrail.getRun(/*RUN_ID=*/args.trRunId, function (err, response, run) {
            console.log(run);
        });
        break;
    case 'getResultsForRun' :
        testrail.getResultsForRun(/*RUN_ID=*/args.trRunId, /*FILTERS=*/trFilter, function (err, response, results) {
            console.log(results);
        });
        break;
    case "getResultsForCase":
        testrail.getResultsForCase(/*RUN_ID=*/args.trRunId, /*CASE_ID=*/args.trCaseId, /*FILTERS=*/trFilter, function (err, response, results) {
            console.log(results);
        });
        break;
    case "getResults_ByTestId" :
        testrail.getResults(/*TEST_ID=*/args.trTestId, /*FILTERS=*/args.trFilter, function (err, response, results) {
            console.log(results);
        });
        break;        
    case 'getSections':
    case 'getFeatures':
        testrail.getSections(/*PROJECT_ID=*/args.trProjectId, /*SUITE_ID=*/args.trSuiteId, function (err, response, sections) {
            console.log(sections)
        });
        break;
    case 'getSection':
    case 'getFeature':
        testrail.getSection(/*SECTION_ID=*/args.trSectionId, function (err, response, section) {
            console.log(section);
        });
        break;
    case 'getSuites':
    case 'getModules':
        testrail.getSuites(/*PROJECT_ID=*/args.trProjectId, function (err, response, suites) {
            console.log(suites);    
        });
        break;
    case 'getSuite':
    case 'getModule':
        testrail.getSuite(/*SUITE_ID=*/args.trSuiteId, function (err, response, suite) {
            console.log(suite);
        });
        break;
    case 'getSuiteByName':
    case 'getModuleByName':    
        testrail_lib.getSuiteId_byName(args.trProjectId, args.trSuiteName).then(suiteId => {
            testrail.getSuite(/*SUITE_ID=*/suiteId, function (err, response, suite) {
                console.log(suite);
            });
        });
        break;
    case 'getUsers':
        testrail.getUsers(/*FILTERS=*/trFilter, function (err, response, users) {
            console.log(users);
        });
        break;
    case 'getUserById':
        testrail.getUser(/*USER_ID=*/args.trUserId, function (err, response, user) {
            console.log(user);
        });
        break;
    case 'getUserByEmail':
        testrail.getUserByEmail(/*EMAIL=*/args.trUserEmail, function (err, response, user) {
            console.log(user);
        });
        break;
    case 'addSuite':
    case 'addModule':
        testrail_lib.addSuite_byName(args.trProjectId, args.trSuiteName).then(addedSuite => {
            console.log(addedSuite);
        })
        break;
    case 'addSection':
    case 'addFeature':
        if (!args.trProjectId) {
            console.log('trProjectId is required');
            break;
        }
        if (!args.trSuiteName) {
            console.log('trSuiteName is required');
            break;
        }
        testrail_lib.addSection_byName(args.trProjectId, args.trSuiteName, args.trSuiteName).then(mySection => {
            console.log(mySection.name);
        });
        break;
    case 'cbPretestCheck' :
        if (!args.cbJsonPath) {
            console.log('cbJsonPath is required');
            break;
        }   
        const cbJsonPretest = jsonfile.readFileSync(args.cbJsonPath);
        testrail_lib.getPretestStatus(cbJsonPretest)
        .then( result => {
            console.log ("No issue detected in the JSON result. All good!")
        }).catch ( preTestError  => {                
            console.error ( preTestError );
        }); 
        break;
    case 'cbAddCases':
    /*Input: 
    [Required: trProjectId, cbJsonPath]
    [Optional: trForceAdd(false), trForceUpdate(false)]*/
        if (!args.trProjectId) {
            console.log('trProjectId is required');
            break;
        }
        if (!args.cbJsonPath) {
            console.log('cbJsonPath is required');
            break;
        }        
        const cbJson = jsonfile.readFileSync(args.cbJsonPath);
        testrail_lib.getSuiteName_byResultJson (cbJson)
        .then ( mySuiteName => {
            // testrail_lib.getPretestStatus(cbJson)
            // .then( pretestResult => {                
                testrail_lib.getSuiteId_byName(args.trProjectId, mySuiteName, /*forceAdd*/args.trForceAdd, /*forceUpdate*/args.trForceUpdate)
                .then(suiteId => {
                    cbJson.forEach(feature => {
                        var myFeature = {
                            //name: feature.keyword + ': ' + feature.uri.substring(feature.uri.lastIndexOf('/')+1, feature.uri.length) + ' || ' + feature.name ,
                            name: testrail_lib.getGeneratedSectionName (feature),
                            suite_id: suiteId,
                            description: feature.description           
                        };
                        testrail_lib.getSectionId_byName(/*PROJECT_ID=*/args.trProjectId, mySuiteName, myFeature.name, myFeature, /*forceAdd*/args.trForceAdd, /*forceUpdate*/args.trForceUpdate)
                        .then(sectionId => (async () => {  
                            for (var index = 0; index < feature.elements.length; index++) {
                                scenario = feature.elements[index];
                                await testrail_lib.getCaseId_byScenario(args.trProjectId, mySuiteName, myFeature.name, feature, scenario, /*forceAdd*/args.trForceAdd, /*forceUpdate*/args.trForceUpdate)
                                .then(myCaseId => {
                                    if ( myCaseId != 0 ) console.log('   > trCaseId: ' + myCaseId);
                                }).catch (getCaseError => {
                                    console.error (getCaseError);
                                });
                            };                    
                        })()).catch (getSectionError => {
                            console.error (getSectionError);
                        }); // convert callback into async func to use await inside (async () => {})()
                    });
                }).catch (getSuiteError => {
                    console.error (getSuiteError);
                });
            // }).catch ( preTestError  => {                
            //     console.error ( preTestError );
            // }); 
        }).catch (suiteNameError => { 
            console.error (suiteNameError);
        });                            
        break;

    case 'cbUpdateResults' :
    /*Input: 
    [Required: trProjectId, cbJsonPath]
    [Optional: trSprintId (auto), trForceAdd(false), trForceUpdate(false), trTestTarget(QA), trJenkinsPath]*/
        if (!args.trProjectId) {
            console.log('trProjectId is required');
            break;
        }
        if (!args.cbJsonPath) {
            console.log('cbJsonPath is required');
            break;
        }  
        const cbJsonTestrun = jsonfile.readFileSync(args.cbJsonPath);    
        testrail_lib.getSuiteName_byResultJson (cbJsonTestrun)
        .then ( mySuiteName => {
            //  testrail_lib.getPretestStatus(cbJsonTestrun)
            //  .then( pretestResult => {
                testrail_lib.getMilestones_byProjectId(args.trProjectId, args.trSprintId , args.trForceAdd)
                .then(milestoneId => {
                    testrail_lib.getCaseDicts_byFeature ( args.trProjectId, mySuiteName, cbJsonTestrun )
                    .then ( caseDicts => {
                        testrail_lib.getTestRuns_byMilestoneId ( args.trProjectId, milestoneId , args.trSprintId , mySuiteName , caseDicts , args.trJenkinsPath, args.trForceAdd, args.trForceUpdate)
                        .then ( testRunId => {
                            console.log ( "> Test Run ID : " + testRunId);
                            testrail_lib.addTestResultInBulk ( testRunId, cbJsonTestrun, caseDicts, args.trTestTarget, args.trJenkinsPath)                        
                        }).catch ( testrunError => {
                            console.error ( testrunError );
                        })
                    }).catch ( caseDictError => {
                        console.error (caseDictError );
                    });   
                }).catch ( milestoneError => {
                    console.error ( milestoneError );
                });  
            //  }).catch ( preTestError  => {                
            //      console.error ( preTestError );
            //  });      
        }).catch (suiteNameError => {
            console.error (suiteNameError);
        }); 
        break;

    //@samplecode
    case 'xUpdateResultIndividually' :
    /*Input: 
    [Required: trProjectId, cbJsonPath]
    [Optional: trSprintId (auto), trForceAdd(false), trForceUpdate(false), trTestTarget(QA)]*/
        if (!args.trProjectId) {
            console.log('trProjectId is required');
            break;
        }
        if (!args.cbJsonPath) {
            console.log('cbJsonPath is required');
            break;
        }  
        const cbJsonUpdate = jsonfile.readFileSync(args.cbJsonPath);   
        
         testrail_lib.getSuiteName_byResultJson (cbJsonUpdate)
         .then ( mySuiteName => {
            testrail_lib.getCaseDicts_byFeature ( args.trProjectId, mySuiteName, cbJsonUpdate )
            .then ( caseDicts => {
            // cbJsonTestrun.forEach (feature => {
                    //     var myFeature = {
                    //         name: testrail_lib.getGeneratedSectionName(feature)
                    //     };                            
                    //     feature.elements.forEach ( scenario => { 
                    //          testrail_lib.addTestResult ( testRunId, args.trProjectId, mySuiteName, myFeature.name, feature, scenario , false, args.trTestTarget)//.then( resp => {
                    //            // console.log ( resp );
                    //         //})
                    //     })
                    //     // feature.elements.forEach ( scenario => (async () => {
                    //     //     await testrail_lib.addTestResult ( testRunId, args.trProjectId, mySuiteName, myFeature.name, feature, scenario , false).then( resp => {
                    //     //        // console.log ( resp );
                    //     //     })
                    //     // })())
                    // })
                    // testrail_lib.addTestResult ( testRunId , cbJsonTestrun, caseDicts ,args.trTestTarget)
                    // .then ( result => {
                    //     console.log ( "Result added/updated successfully" );
                    // }).catch (testresultError => {
                    //     console.error ( testresultError );
                    // });
                testrail_lib.addTestResultInBulk ( args.trTestrunId, cbJsonUpdate, caseDicts, args.trTestTarget)
                // .then (result => {
                //     console.log ( "OK!!");
                // })
            })
        })
        break;

    //@samplecode
    case 'xDeleteSections':
        //use for testing only
        testrail_lib.getSuiteId_byName ( 63, args.trSuiteName , false ).then ( suiteid => {
            console.log ( "FOUND SUITE : " + suiteid)
            testrail.getSections(/*PROJECT_ID=*/ 63, /*suite-id*/ suiteid , function (err, response, sections) {
                sections.forEach ( sec => {
                    console.log ( "Deleting section => " + sec.name )
                    testrail.deleteSection ( sec.id );
                })
            });            
        })
        break;

    //@samplecode
    case 'xDeleteSuites':
        //use for testing only
        testrail_lib.getSuiteId_byName ( 63, args.trSuiteName , false ).then ( suiteid => {
            console.log ( "FOUND SUITE : " + suiteid)
            console.log ( "Deleting suite => " + suiteid )
            testrail.deleteSuite ( suiteid );
            });            
        break;
    default:
        console.error ( "Unknown command \"" + args.trCmd + "\" provided to trCmd parameter. ");
        break;
}
